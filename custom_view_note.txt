
paint 的方法

一.........颜色

//设置一个渲染器  TileMode 渲染模式: CLAMP延伸模式 REPEAT重复模式 MIRROR镜像模式
1.SweepGradient(float cx, float cy, int color0, int color1)角度渲染 cx,cy 渲染的中心坐标 ,color0 开始渲染的颜色,color1 结束渲染的颜色  
2.LinearGradient(float x0, float y0, float x1, float y1, int color0, int color1,TileMode tile)线性渲染 
x0,y0 起点坐标 x1,y1, 坐标 color0,开始渲染的,color1,结束渲染的颜色.TileMode渲染模式
3.RadialGradient(float centerX, float centerY, float radius,int centerColor, int edgeColor, @NonNull TileMode tileMode)中心扩散渲染
centerX,centerY渲染的中心点 radius  渲染半径 centerColor 中心点的颜色,edgeColor 外层颜色.TileMode 渲染模式
4.BitmapShader(@NonNull Bitmap bitmap, TileMode tileX, TileMode tileY) bitmap 渲染
bitmap 需要渲染的bitmap   tileX x方向的渲染模式, tileY y方向的渲染模式
5.ComposeShader(Shader shaderA, Shader shaderB, PorterDuff.Mode mode),混合渲染
shaderA 第一个渲染器 shaderB 第二个渲染器 Mode  混合模式 src_in src_over 等
如果shaderA和shaderB的是同一类型的渲染器 需要取消硬件加速  setLayerType(LAYER_TYPE_SOFTWARE, null);

paint.setShader();

//设置ColorFilter  

1. LightingColorFilter(int mul,int add); mul 与目标像素相乘,add 与目标像素相加, 参数都是颜色的int值一致
   .最基本的参数为 mul = 0xffffff  add = 0x000000  这个时候设置上去 是没有任何效果的. 
   如果想去掉红色 让 mul = 0x00ffff  也就是红色的值改为0  add保持不变就可以 
   
   计算过程为 : R' =  R * 0x00 / 0xff + 0x00 = 0;
               G' =  G * 0xff / 0xff + 0x00 = G;
               B' =  B * 0xff / 0xff + 0x00 = B;
               
想要加强指定的颜色值  就可以 设置mul 为 0xffffff  然后让add 中指定的数值增大 
比如加强绿色  add = 0x003300;  这样  绿色会被增强 其它的颜色保持不变

2.PorterDuffColorFilter(int color, Mode mode)  color  颜色值  mode  图片混合模式中的一种.如src_in src_out等. 
使用指定的颜色和绘制对象进行合成

3.ColorMatrixColorFilter(float[] array);  array  一个 4 x 5 的矩阵  
.ColorMatrixColorFilter(ColorMatrix matrix);
 array= [a,b,c,d,e,
         f,g,h,i,j,
         k,l,m,n,o,
         p,q,r,s,t]
 通过矩阵计算 将颜色值进行转换
 R' = a*R + b*G + c*B + d*A + e;
 G’ = f*R + g*G + h*B + i*A + j;  
 B’ = k*R + l*G + m*B + n*A + o;  
 A’ = p*R + q*G + r*B + s*A + t;  
 
或者直接使用ColorMatrix  他的内部也是一个4 x 5 的矩阵而且自带一些方法 可以设置
ColorMatrix.setSaturation(); 设置饱和度

paint.setColorFilter();

//setXferMode x 就是Trans 也就是 setTransferMode
严谨地讲，Xfermode 指的是你要绘制的内容和 Canvas 的目标位置的内容应该怎样结合计算出最终的颜色。
但通俗地说，其实就是要你以绘制的内容作为源图像，以 View 中已有的内容作为目标图像，选取一个 PorterDuff.Mode 作为绘制内容的颜色处理方案
可以说是两个bitmap 以怎洋的形式进行合成.
  示例代码:
         // 使用 paint.setXfermode() 设置不同的结合绘制效果
        int i = canvas.saveLayer(null, null, Canvas.ALL_SAVE_FLAG); //使用离屏缓冲
        // 别忘了用 canvas.saveLayer() 开启 off-screen buffer
        PorterDuffXfermode porterDuffXfermode = new PorterDuffXfermode(PorterDuff.Mode.SRC);
        canvas.drawBitmap(bitmap1, 0, 0, paint);
        // 第一个：PorterDuff.Mode.SRC
        paint.setXfermode(porterDuffXfermode);
        canvas.drawBitmap(bitmap2, 0, 0, paint);
        paint.setXfermode(null);//使用后要及时清除.
        canvas.restoreToCount(i);
注意:  要注意控制透明区域不能太小 .否则Xfermode是影响不到结果的.

//setAntiAlias (boolean aa) 设置抗锯齿


//setStyle(Style style) 三种模式
Paint.Style.FILL_AND_STROKE 填充并画线
Paint.Style.STROKE 画线
Paint.Style.FILL 填充

二......线条形状的方法:

//setStrokeWidth(float width) 设置线条宽度  默认为0           

//setStrokeCap(Cap cap) 设置端点形状
三种模式
Cap.BUTT 平头  Cap.ROUND 圆头 Cap.SQUARE  方头

//setStrokeJoin(Paint.Join join)设置拐角的形状
三种模式
MITER 尖拐角 BEVEL 平头拐角 ROUND 圆拐角

//setStrokeMiter(int miter) 当 拐角形状模式为 MITER 时 对其的一个补充
默认值为4  大约为一个29%的角  小于这个角度的拐角 不会使用MITER模式 会换为BEVEL模式 因为MITER的尖角延长线太长 

三.......色彩优化的方法
//setDither  设置是否开启图像的抖动
//setFilterBitmap 设置是否使用双线性过滤来绘制bitmap

//setPathEffect(PathEffect pathEffect)
1.CornerPathEffect(int radius) 把所有拐角都变成圆角 radius  圆角的半径
2.DiscretePathEffect(float segmentLength, float deviation); 把线条进行随机的偏离，让轮廓变得乱七八糟。
segmentLength 是用来拼接的每个线段的长度， deviation 是偏离量。
3.DashPathEffect(float[] intervals, float phase) 使用虚线来绘制线条
第一个参数 intervals 是一个数组，它指定了虚线的格式：数组中元素必须为偶数（最少是 2 个），
按照「画线长度、空白长度、画线长度、空白长度」……的顺序排列，
第二个参数 phase 是虚线的偏移量。
4.PathDashPathEffect(Path shape, float advance, float phase, PathDashPathEffect.Style style)  使用一个path 来绘制虚线
shape: 用来绘制的path 
advance 是两个相邻的 shape 段之间的间隔，不过注意，这个间隔是两个 shape 段的起点的间隔，而不是前一个的终点和后一个的起点的距离； 
phase 和 DashPathEffect 中一样，是虚线的偏移；
style，是用来指定拐弯改变的时候 shape 的转换方式 TRANSLATE：位移 ROTATE：旋转 MORPH：变体
5.SumPathEffect(PathEffect first, PathEffect second) 使用两种PathEffect 合成一种PathEffect 来画线
6.ComposePathEffect(PathEffect outerpe, PathEffect innerpe)  
这也是一个组合效果类的 PathEffect 。
不过它是先对目标 Path 使用一个 PathEffect，然后再对这个改变后的 Path 使用另一个 PathEffect。

//setShadowLayer(float radius,float dx,float dy,int shadowColor) 设置阴影radius 阴影范围 dx,dx 偏移量 shadowColor 阴影颜色
清除阴影层使用 clearShadowLayer();
注意：

在硬件加速开启的情况下， setShadowLayer() 只支持文字的绘制，文字之外的绘制必须关闭硬件加速才能正常绘制阴影。
如果 shadowColor 是半透明的，阴影的透明度就使用 shadowColor 自己的透明度；
而如果 shadowColor 是不透明的，阴影的透明度就使用 paint 的透明度。

//setMaskFilter(MaskFilter maskfilter)
BlurMaskFilter(float radius, BlurMaskFilter.Blur style) 效果模糊的filter
radius 模糊的半径  style NORMAL: 内外都模糊绘制 SOLID: 内部正常绘制，外部模糊 INNER: 内部模糊，外部不绘制 OUTER: 内部不绘制，外部模糊
EmbossMaskFilter(float[] direction, float ambient, float specular, float blurRadius); 
direction 是一个 3 个元素的数组，指定了光源的方向； ambient 是环境光的强度，数值范围是 0 到 1； 
specular 是炫光的系数； blurRadius 是应用光线的范围
