
Canvas.drawTextOnPath(String text, Path path, float hOffset, float vOffset, Paint paint);
参数里，需要解释的只有两个： hOffset 和 vOffset。它们是文字相对于 Path 的水平偏移量和竖直偏移量，利用它们可以调整文字的位置。
例如你设置 hOffset 为 5， vOffset 为 10，文字就会右移 5 像素和下移 10 像素。
记住一条原则： drawTextOnPath() 使用的 Path ，拐弯处全用圆角，别用尖角。

StaticLayout(CharSequence source, TextPaint paint, int width, Layout.Alignment align, float spacingmult, 
float spacingadd, boolean includepad);
width 是文字区域的宽度，文字到达这个宽度后就会自动换行； 
align 是文字的对齐方向； 
spacingmult 是行间距的倍数，通常情况下填 1 就好； 
spacingadd 是行间距的额外增加值，通常情况下填 0 就好； 
includeadd 是指是否在文字上下添加额外的空间，来避免某些过高的字符的绘制出现越界。

如果你需要进行多行文字的绘制，并且对文字的排列和样式没有太复杂的花式要求，那么使用  StaticLayout 就好。

Paint.setTextSize(int size) 设置文字大小

Paint.setTypeFace(TypeFace typeFace) 设置字体

Paint.setFakeBoldText(boolean fakeBoldText) 设置是否使用伪粗体
之所以叫伪粗体（ fake bold ），因为它并不是通过选用更高 weight 的字体让文字变粗，而是通过程序在运行时把文字给「描粗」了

Paint.setStrikeThruText(boolean strikeThruText) 设置是否加删除线

Paint.setUnderlineText(boolean underlineText) 设置是否加下划线

Paint.setTextSkewX(float skewX) 设置文字横向错切角度。其实就是文字倾斜度的啦。

Paint.setTextScaleX(float scaleX) 设置文字横向放缩。也就是文字变胖变瘦。

Paint.setLetterSpacing(float letterSpacing) 设置字符间距。默认值是 0。

Paint.setFontFeatureSettings(String settings) 
用 CSS 的 font-feature-settings 的方式来设置文字。paint.setFontFeatureSettings("smcp"); // 设置 "small caps"  
canvas.drawText("Hello HenCoder", 100, 150, paint);  

Paint.setTextAlign(Paint.Align align) 设置文字的对齐方式。一共有三个值：LEFT CETNER 和 RIGHT。默认值为 LEFT。

Paint.setTextLocale(Locale locale) / setTextLocales(LocaleList locales)
设置绘制所使用的 Locale。

Locale 直译是「地域」，其实就是你在系统里设置的「语言」或「语言区域」（具体名称取决于你用的是什么手机），
比如「简体中文（中国）」「English (US)」「English (UK)」。
有些同源的语言，在文化发展过程中对一些相同的字衍生出了不同的写法（比如中国大陆和日本对于某些汉字的写法就有细微差别。
注意，不是繁体和简体这种同音同义不同字，而真的是同样的一个字有两种写法）。
系统语言不同，同样的一个字的显示就有可能不同。
你可以试一下把自己手机的语言改成日文，然后打开微信看看聊天记录，你会明显发现文字的显示发生了很多细微的变化，这就是由于系统的 Locale 改变所导致的。
Canvas 绘制的时候，默认使用的是系统设置里的 Locale。而通过 Paint.setTextLocale(Locale locale) 就可以在不改变系统设置的情况下，直接修改绘制时的 Locale。
另外，由于 Android 7.0 ( API v24) 加入了多语言区域的支持，所以在 API v24 以及更高版本上，还可以使用 setTextLocales(LocaleList locales) 来为绘制设置多个语言区域。

Paint.setHinting(int mode)
设置是否启用字体的 hinting （字体微调）。

现在的 Android 设备大多数都是是用的矢量字体。
矢量字体的原理是对每个字体给出一个字形的矢量描述，然后使用这一个矢量来对所有的尺寸的字体来生成对应的字形。
由于不必为所有字号都设计它们的字体形状，所以在字号较大的时候，矢量字体也能够保持字体的圆润，这是矢量字体的优势。
不过当文字的尺寸过小（比如高度小于 16 像素），有些文字会由于失去过多细节而变得不太好看。
hinting 技术就是为了解决这种问题的：通过向字体中加入 hinting 信息，让矢量字体在尺寸过小的时候得到针对性的修正，从而提高显示效果。

Paint.setElegantTextHeight(boolean elegant)
声明：这个方法对中国人没用，不想看的话可以直接跳过，无毒副作用。
设置是否开启文字的 elegant height 。开启之后，文字的高度就变优雅了（误）。下面解释一下所谓的 elegant height：
在有些语言中，可能会出现一些非常高的字形,Paint 绘制文字时是用的默认版本就是压缩版本.
不过有的时候，开发者会需要使用它们的原始（优雅）版本。使用 setElegantTextHeight() 就可以切换到原始版本.

Paint.setSubpixelText(boolean subpixelText)
是否开启次像素级的抗锯齿（ sub-pixel anti-aliasing ）。
次像素级抗锯齿这个功能解释起来很麻烦，简单说就是根据程序所运行的设备的屏幕类型，来进行针对性的次像素级的抗锯齿计算，从而达到更好的抗锯齿效果。
不过，和前面讲的字体 hinting 一样，由于现在手机屏幕像素密度已经很高，
所以默认抗锯齿效果就已经足够好了，一般没必要开启次像素级抗锯齿，所以这个方法基本上没有必要使用。

float Paint.getFontSpacing()
获取推荐的行距。
即推荐的两行文字的 baseline 的距离。这个值是系统根据文字的字体和字号自动计算的。
它的作用是当你要手动绘制多行文字（而不是使用 StaticLayout）的时候，可以在换行的时候给 y 坐标加上这个值来下移文字。
canvas.drawText(texts[0], 100, 150, paint);  
canvas.drawText(texts[1], 100, 150 + paint.getFontSpacing, paint);  
canvas.drawText(texts[2], 100, 150 + paint.getFontSpacing * 2, paint);  

FontMetircs Paint.getFontMetrics()
获取 Paint 的 FontMetrics。
FontMetrics 是个相对专业的工具类，它提供了几个文字排印方面的数值：ascent, descent, top, bottom,  leading。
FontMetrics.ascent：float 类型。
FontMetrics.descent：float 类型。
FontMetrics.top：float 类型。
FontMetrics.bottom：float 类型。
FontMetrics.leading：float 类型。
另外，ascent 和 descent 这两个值还可以通过 Paint.ascent() 和 Paint.descent() 来快捷获取。
FontMetrics 和 getFontSpacing()：
从定义可以看出，上图中两行文字的 font spacing (即相邻两行的 baseline 的距离) 可以通过  bottom - top + leading (top 的值为负，前面刚说过，记得吧？）来计算得出。
但你真的运行一下会发现， bottom - top + leading 的结果是要大于 getFontSpacing() 的返回值的。
两个方法计算得出的 font spacing 竟然不一样？
这并不是 bug，而是因为 getFontSpacing() 的结果并不是通过 FontMetrics 的标准值计算出来的，而是另外计算出来的一个值，它能够做到在两行文字不显得拥挤的前提下缩短行距，以此来得到更好的显示效果。所以如果你要对文字手动换行绘制，多数时候应该选取 getFontSpacing() 来得到行距，不但使用更简单，显示效果也会更好。
getFontMetrics() 的返回值是 FontMetrics 类型。它还有一个重载方法  getFontMetrics(FontMetrics fontMetrics) ，计算结果会直接填进传入的 FontMetrics 对象，而不是重新创建一个对象。这种用法在需要频繁获取 FontMetrics 的时候性能会好些。

另外，这两个方法还有一对同样结构的对应的方法 getFontMetricsInt() 和  getFontMetricsInt(FontMetricsInt fontMetrics) ，用于获取 FontMetricsInt 类型的结果。

Paint.getTextBounds(String text, int start, int end, Rect bounds)
获取文字的显示范围。
参数里，text 是要测量的文字，start 和 end 分别是文字的起始和结束位置，bounds 是存储文字显示范围的对象，方法在测算完成之后会把结果写进 bounds。

float Paint.measureText(String text) 测量文字的宽度并返回

Paint.getTextWidths(String text, float[] widths)

获取字符串中每个字符的宽度，并把结果填入参数 widths。
这相当于 measureText() 的一个快捷方法，它的计算等价于对字符串中的每个字符分别调用 measureText(),
并把它们的计算结果分别填入 widths 的不同元素。
getTextWidths() 同样也有好几个变种，使用大同小异，不再介绍。
